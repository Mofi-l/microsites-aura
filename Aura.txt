// ==UserScript==
// @name         Aura_New_Test
// @namespace    Paragon_Microsites_NPT_SESU_1.0
// @author       mofila@
// @description  Paragon New AUX widget for Microsites
// @include      /^https:\/\/paragon-(na|eu|fe|cn|na-preprod|cn-preprod)\.amazon\.com\/hz\/(lobby(\/v2)?|view-case|create-case|dox-search|search|case|view-case\?caseId=.*|case\?caseId=.*&paramountDebug=1|view-case\?workItemRegion=na&caseId=.*|dox-search\?searchQuery=owner:.*&contentType=CASE&sortField=creationDate&sortOrder=desc)$/
// @downloadURL  https://drive.corp.amazon.com/documents/mofila@/Microsite%20Automated%20NPT/Microsite%20NPT%20Prod/Aura%201.0-1.0.user.js
// @updateURL	 https://drive.corp.amazon.com/documents/mofila@/Microsite%20Automated%20NPT/Microsite%20NPT%20Prod/Aura%201.0-1.0.user.js
// @version      1.0
// @grant        GM_notification
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function() {
    'use strict';

    const currentVersion = '1.0';
    const updateUrl = 'https://my-aux-data-bucket.s3.amazonaws.com/Aura.txt';

    // Function to check for updates
    function checkForUpdates() {
        GM.xmlHttpRequest({
            method: 'GET',
            url: updateUrl,
            onload: function(response) {
                if (response.status === 200) {
                    const latestVersion = response.responseText.trim();
                    if (latestVersion !== currentVersion) {
                        notifyUpdate(latestVersion);
                    }
                }
            },
            onerror: function() {
                console.error('Failed to check for updates.');
            }
        });
    }

    // Function to show a notification when a new version is available
    function notifyUpdate(latestVersion) {
        GM_notification({
            title: 'Script Update Available',
            text: `A new version (${latestVersion}) is available!`,
            timeout: 5000,
            onclick: function() {
                // You can redirect users to a specific URL or reload the page if needed
                window.location.href = 'https://my-aux-data-bucket.s3.amazonaws.com';
            }
        });
    }

    checkForUpdates();

//Function to clear LocalStorage automatically everyday @11:00 AM
function clearLocalStorageIfNeeded() {
    const now = new Date();
    const currentHour = now.getHours();
    const todayDate = now.toISOString().split('T')[0];

    const lastClearedDate = localStorage.getItem('lastClearedDate');

    if (!lastClearedDate || (lastClearedDate !== todayDate && currentHour >= 5)) {
        const lastCleared = new Date(lastClearedDate);

        if (!lastClearedDate || (now - lastCleared > 24 * 60 * 60 * 1000)) {
            localStorage.clear();
            localStorage.setItem('lastClearedDate', todayDate);
            console.log('Local storage cleared.');
        }
    }
}

clearLocalStorageIfNeeded();
///////////////////////////////////////////////////////////////
//Save AUX data//
// Function to save AUX data to localStorage
function saveAUXData(entry) {
    const auxData = JSON.parse(localStorage.getItem('auxData')) || [];

    function saveUniqueValue(key, value) {
        let storedValues = JSON.parse(localStorage.getItem(key)) || [];
        if (value && !storedValues.includes(value)) {
            storedValues.push(value);
            localStorage.setItem(key, JSON.stringify(storedValues));
        }
    }

    function updateEntry(entryToUpdate, key, newValue) {
        if (newValue) {
            entryToUpdate[key] = entryToUpdate[key] || [];
            if (!entryToUpdate[key].includes(newValue)) {
                entryToUpdate[key].push(newValue);
            }
        }
    }

    const relevantEntries = auxData.map((item, index) => ({ item, index }))
                                   .filter(({ item }) => item.auxLabel.includes("Conduct Project"));

    const previousEntry = relevantEntries.length > 1 ? relevantEntries[relevantEntries.length - 2].item : null;
    const previousEntryIndex = relevantEntries.length > 1 ? relevantEntries[relevantEntries.length - 2].index : -1;
    const lastEntry = relevantEntries.length > 0 ? relevantEntries[relevantEntries.length - 1].item : null;
    const lastIndex = relevantEntries.length > 0 ? relevantEntries[relevantEntries.length - 1].index : -1;

    const uniqueId = entry.username + '-' + entry.date + '-' + entry.auxLabel + '-' + Math.random().toString(36).substr(2, 9);

    if (entry.timeSpent > 0) {
        const existingEntryIndex = auxData.findIndex(item => item.uniqueId === uniqueId);

        saveUniqueValue('relatedAudits', entry.relatedAudits);

        if (previousEntry) {
            updateEntry(previousEntry, 'relatedAudits', entry.relatedAudits || localStorage.getItem('relatedAudits-' + entry.auxLabel));
            auxData[previousEntryIndex] = previousEntry;
        }

        if (lastEntry) {
            updateEntry(lastEntry, 'relatedAudits', entry.relatedAudits || localStorage.getItem('relatedAudits-' + entry.auxLabel));
            auxData[lastIndex] = lastEntry;
        }

        if (existingEntryIndex === -1) {
            auxData.push({
                uniqueId: uniqueId,
                date: entry.date,
                username: entry.username,
                auxLabel: entry.auxLabel,
                timeSpent: entry.timeSpent,
                projectTitle: entry.projectTitle || localStorage.getItem('projectTitle-' + entry.auxLabel),
                areYouPL: entry.areYouPL || localStorage.getItem('areYouPL-' + entry.auxLabel),
                comment: entry.comment || localStorage.getItem('comment-' + entry.auxLabel),
            });

            localStorage.setItem('auxData', JSON.stringify(auxData));
            console.log('AUX Data saved:', auxData);
        } else {
            console.log('Entry with the same unique identifier already exists.');
        }
    } else {
        console.log('Time spent is 0:00:00. Skipping entry.');
    }
}
///////////////////////////////////////////////////////////////
//Cloud//
// Function to export AUX data to CSV
function exportToCSV() {
    try {
        const auxDataString = localStorage.getItem('auxData');
        console.log('AUX Data from localStorage (String):', auxDataString);
        const auxData = JSON.parse(auxDataString) || [];
        console.log('AUX Data from localStorage (Parsed):', auxData);

        const filteredData = auxData.filter(entry => entry.date !== undefined);

        const csvContent = 'data:text/csv;charset=utf-8,' +
            'Date,Username,AUX Label,Time Spent,Project Title,Related Audits,Are You the PL?,Comment\n' +
            filteredData.map(entry =>
                `${entry.date},${entry.username},${entry.auxLabel},${formatTime(entry.timeSpent)},${entry.projectTitle},${entry.relatedAudits},${entry.areYouPL ? `"${entry.areYouPL}"` : ''},${entry.comment ? `"${entry.comment}"` : ''}`
            ).join('\n');

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement('a');
        link.setAttribute('href', encodedUri);
        link.setAttribute('download', 'aux_data.csv');
        document.body.appendChild(link); // Required for FF

        link.click();
    } catch (error) {
        console.error('Error exporting AUX data to CSV:', error);
    }
    if (!finalSelectionMade) {
        console.log("finalSelectionMade selection (AUX L3) has not been made yet. AUX data will not be exported.");
        return;
    }
}

// Function to export AUX data to AWS in CSV format
function exportToAWS() {
    // Ask for confirmation before exporting
    const userConfirmed = confirm('Are you sure you want to export the data to AWS?');

    // If the user clicks "No", terminate the action
    if (!userConfirmed) {
        return;
    }

    try {
        const auxDataString = localStorage.getItem('auxData');
        console.log('AUX Data from localStorage:', auxDataString);
        const auxData = JSON.parse(auxDataString) || [];

        const filteredData = auxData.filter(entry => entry.date !== undefined);

        const csvContent = 'Date,Username,AUX Label,Time Spent,Project Title,Related Audits,Are you the PL?,Comment\n' +
            filteredData.map(entry =>
                `${entry.date},${entry.username},${entry.auxLabel},${entry.timeSpent},${entry.projectTitle || ''},${entry.relatedAudits || ''},${entry.areYouPL ? `"${entry.areYouPL}"` : ''},${entry.comment ? `"${entry.comment}"` : ''}`
            ).join('\n');

        // Send data to AWS API Gateway
        fetch('https://7cvypzdfrh.execute-api.eu-north-1.amazonaws.com/Testing/auxData', {
            method: 'POST',
            headers: {
                'Content-Type': 'text/csv', // Set content type to CSV
            },
            body: csvContent
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            console.log('Data successfully sent to AWS');
            alert('NPT sent to server successfully');
        })
        .catch(error => {
            console.error('Error sending data to AWS:', error);
            alert('Oops something went wrong');
        });
    } catch (error) {
        console.error('Error exporting AUX data to AWS:', error);
        alert('Oops something went wrong');
    }
}

// Function to export AUX data to server - Logic not required for now
function exportToServer() {
    console.log('Export to Server button clicked');
    try {
        const auxDataString = localStorage.getItem('auxData');
        console.log('AUX Data from localStorage (String):', auxDataString);
        const auxData = JSON.parse(auxDataString) || [];
        console.log('AUX Data from localStorage (Parsed):', auxData);

        const filteredData = auxData.filter(entry => entry.date !== undefined).map(entry => ({
            ...entry,
            timeSpent: parseFloat(entry.timeSpent),
            relatedAudits: parseInt(entry.relatedAudits),
        }));
        console.log('Filtered AUX Data:', filteredData);

        const url = 'https://7cvypzdfrh.execute-api.eu-north-1.amazonaws.com/Testing/auxData';
        const postData = JSON.stringify(filteredData);
        console.log('Post Data:', postData);

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: postData
        })
        .then(response => {
            console.log('Response received:', response);
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            console.log('Success:', data);
            alert('NPT sent to server successfully');
        })
        .catch(error => {
            console.error('Error sending AUX data to server:', error);
            alert('Oops something went wrong');
        });
    } catch (error) {
        console.error('Error processing AUX data for server export:', error);
        alert('Oops something went wrong');
    }
    if (!finalSelectionMade) {
        console.log("finalSelectionMade selection (AUX L3) has not been made yet. AUX data will not be exported.");
        return;
    }
}
///////////////////////////////////////////////////////////////
//Username function//
// Function to fetch and display the username with retry mechanism
function displayUsername() {
    console.log("Attempting to display username...");

    const xpaths = [
        '/html/body/div[1]/div/div/header/div[4]/nav/div/ul/span/li',
        '/html/body/div[2]/div/header/div[4]/nav/div/ul/span/li',
        '/html/body/div[2]/div/div/header/div[4]/nav/div/ul/span/li',
        '/html/body/div[1]/div/header/div[4]/nav/div/ul/span/li',
        '/html/body/div[1]/div/div/div/header/div[4]/nav/div/ul/span/li',
        '/html/body/div[2]/div/div/div/header/div[4]/nav/div/ul/span/li'
    ];

    let usernameElement = null;

    // Try to find the username element using the provided xpaths
    for (const xpath of xpaths) {
        usernameElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        if (usernameElement) {
            break;
        }
    }

    console.log("Username element:", usernameElement);

    let usernameDisplay = document.getElementById('username-display');
    if (!usernameDisplay) {
        usernameDisplay = document.createElement('div');
        usernameDisplay.id = 'username-display';
        const widget = document.getElementById('aux-widget');
        if (widget) {
            widget.insertBefore(usernameDisplay, widget.firstChild);
        } else {
            console.log("Widget not found, delaying username display.");
            setTimeout(displayUsername, 500);
            return;
        }
    }

    if (usernameElement) {
        const usernameText = usernameElement.textContent.trim();
        const username = usernameText.substring(usernameText.indexOf("User: ") + 6, usernameText.indexOf("Tenant:")).trim();
        console.log("Username:", username);
        usernameDisplay.textContent = `Login: ${username}`;
        usernameDisplay.style.color = 'white'; // Set text color to white
        return username;
    } else {
        console.error('Username element not found. Retrying...');
        usernameDisplay.textContent = 'Loading username...'; // Show loading message
        usernameDisplay.style.color = 'yellow'; // Set color to indicate loading
        // Retry fetching the username every 500ms until it is found
        setTimeout(displayUsername, 500);
        return null;
    }
}
    displayUsername();

// Run the displayUsername function after DOM is fully loaded and the widget is rendered
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM fully loaded. Starting to display username...");
    displayUsername();
    setTimeout(displayUsername, 1000);
});
///////////////////////////////////////////////////////////////
//Widget Setup//
let lastL3Selection = '';
let lastSelectedL1 = '';
let lastSelectedL2 = '';
let lastSelectedL3 = '';
let finalSelectionMade = false;

const l1Names = {
    '1': 'Available',
    '2': 'On Break',
    '3': 'On Break 2',
    '4': 'At Lunch',
    '5': 'Microsite Project Work',
    '6': 'Non-Microsite Work',
    '7': 'Offline'
};

const l2Mapping = {
    '5': ['Document Review', 'DPM', 'Mapping Project', 'Non RCE Dive', 'Quick Questions', 'RCE Dive', 'Round Table', 'Side by Side', 'Testing', 'Project Quality Audit'],
    '6': ['GIP-SPX Process Improvement', 'In a Meeting', 'Personal Time', 'System Issue', 'In Training', 'HMD Quality Audit']
};

const l3Mapping = {
    'Document Review': ['Conduct Project', 'Project Planning'],
    'DPM': ['Conduct Project', 'Project Planning'],
    'Mapping Project': ['Conduct Project', 'Project Planning'],
    'Non RCE Dive': ['Conduct Project', 'Project Planning'],
    'Quick Questions': ['Conduct Project', 'Project Planning'],
    'RCE Dive': ['Conduct Project', 'Project Planning'],
    'Round Table': ['Conduct Project', 'Project Planning'],
    'Side by Side': ['Conduct Project', 'Project Planning'],
    'Testing':  ['Conduct Project', 'Project Planning'],
    'In a Meeting': ['Adhoc Leadership Request', 'Adhoc One on One', 'Career Development', 'Engagement Activity', 'Monthly One on One', 'Team Meeting']
};

function addHTML(html) {
    const div = document.createElement('div');
    div.innerHTML = html;
    document.body.appendChild(div);
}

// Widget properties
let isWidgetMinimized = localStorage.getItem('widgetState') === 'minimized';

const widgetHTML = `
    <div id="aux-widget" style="position: fixed; top: 5px; left: 1000px; z-index: 10000; background: url(https://drive-render.corp.amazon.com/view/mofila@/Microsite%20Automated%20NPT/Images/Dark%20Background%20Cyan%20and%20White%20Neon%20and%20Typographic%20Desktop%20Wallpaper.jpg) no-repeat center center / cover; padding: 20px; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.2); color: white; display: ${isWidgetMinimized ? 'none' : 'block'};">
        <div style="display: block;">
            <select id="aux-l1" onchange="handleL1Change(event)">
                <option value="">Select L1</option>
                <option value="1">Available</option>
                <option value="2">On Break</option>
                <option value="3">On Break 2</option>
                <option value="4">At Lunch</option>
                <option value="5">Microsite Project Work</option>
                <option value="6">Non-Microsite Work</option>
                <option value="7">Offline</option>
            </select>
            <div id="aux-l2-container"></div>
            <div id="aux-l3-container"></div>
            <div id="aux-timer" style="padding: 10px; margin-top: 10px; background: rgba(255, 255, 255, 0.8); border-radius: 5px;"></div>
        </div>
        <div id="minimize-btn" style="cursor: pointer; position: absolute; top: -1px; right: 5px;">
        <img src="https://drive-render.corp.amazon.com/view/mofila@/Scripts/Aura.png" style="width: 50px; height: 50px;">
    </div>
`;

addHTML(widgetHTML);

const minimizedBoxHTML = `
    <div id="minimized-box" style="position: fixed; bottom: 10px; right: 10px; padding: 10px; background: rgba(0, 0, 0, 0.7); color: white; cursor: pointer; border-radius: 5px;">
        ${isWidgetMinimized ? 'Maximize Aura' : 'Minimize Aura'}
    </div>
`;

addHTML(minimizedBoxHTML);

const style = document.createElement('style');
style.textContent = `
    #aux-widget select {
        width: 200px;
        padding: 5px;
        margin-bottom: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: rgba(255, 255, 255, 0.8); /* Ensure readability */
    }
    #aux-widget div {
        margin-top: 5px;
    }
`;
document.head.appendChild(style);

// Function to toggle widget visibility
function toggleWidget() {
    const widget = document.getElementById('aux-widget');
    const minimizedBox = document.getElementById('minimized-box');

    if (isWidgetMinimized) {
        widget.style.display = 'block';
        minimizedBox.textContent = 'Minimize Aura';
        localStorage.setItem('widgetState', 'maximized');
    } else {
        widget.style.display = 'none';
        minimizedBox.textContent = 'Maximize Aura';
        localStorage.setItem('widgetState', 'minimized');
    }

    isWidgetMinimized = !isWidgetMinimized;
}

document.getElementById('minimize-btn').addEventListener('click', toggleWidget);
document.getElementById('minimized-box').addEventListener('click', toggleWidget);

// Function to make the widget draggable
function makeWidgetDraggable() {
    const widget = document.getElementById('aux-widget');
    let isDragging = false;
    let offsetX, offsetY;

    widget.addEventListener('mousedown', (event) => {
        isDragging = true;
        offsetX = event.clientX - widget.getBoundingClientRect().left;
        offsetY = event.clientY - widget.getBoundingClientRect().top;
    });

    document.addEventListener('mousemove', (event) => {
        if (isDragging) {
            const newX = event.clientX - offsetX;
            const newY = event.clientY - offsetY;
            widget.style.left = newX + 'px';
            widget.style.top = newY + 'px';
        }
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
    });
}

makeWidgetDraggable();
///////////////////////////////////////////////////////////////
//Update Selections//
// Function updateSelections body
    function updateSelections(l1, l2, l3) {
        const auxL1 = document.getElementById('aux-l1');

        document.getElementById('aux-l1').addEventListener('change', function(event) {
            const l1Value = event.target.value;
            if (l1Value) {
                startAUXTimer(l1Names[l1Value] + ' - N/A - N/A');
            } else {
                stopAUXTimer();
            }
        });

        const auxL2 = document.getElementById('aux-l2');
        const auxL3 = document.getElementById('aux-l3');
        console.log("Updating selections to:", l1, l2, l3);
        if (auxL1) auxL1.value = l1;
        if (auxL2) {
            auxL2.value = l2;
            auxL2.dispatchEvent(new Event('change'));
        }
        if (auxL3 && l3) {
            setTimeout(() => {
                auxL3.value = l3;
                auxL3.dispatchEvent(new Event('change'));
            }, 100);
        }
    }
///////////////////////////////////////////////////////////////
//Export functions//
// Function to add export to CSV button
function addExportButton() {
    const exportButton = document.createElement('button');
    exportButton.textContent = 'Export to CSV';
    exportButton.addEventListener('click', exportToCSV);

    applyButtonStyles(exportButton);

    const timerElement = document.getElementById('aux-timer');
    if (timerElement) {
        const parentWidget = timerElement.parentNode;
        parentWidget.appendChild(exportButton);
    } else {
        console.error('aux-timer element not found. Export button could not be added.');
    }
}

// Function to add export to AWS button
function addExportToAWSButton() {
    const exportToAWSButton = document.createElement('button');
    exportToAWSButton.textContent = 'Export to AWS';
    exportToAWSButton.id = 'exportToAWSButton';
    exportToAWSButton.addEventListener('click', exportToAWS);

    applyButtonStyles(exportToAWSButton);

    const timerElement = document.getElementById('aux-timer');
    if (timerElement) {
        const parentWidget = timerElement.parentNode;
        parentWidget.appendChild(exportToAWSButton);
    } else {
        console.error('aux-timer element not found. Export to AWS button could not be added.');
    }
}

// Function to apply inline styles to buttons
function applyButtonStyles(button) {
    button.style.backgroundColor = '#17a2b8';
    button.style.border = 'none';
    button.style.color = 'white';
    button.style.padding = '5px 10px';
    button.style.textAlign = 'center';
    button.style.textDecoration = 'none';
    button.style.display = 'inline-block';
    button.style.fontSize = '10px';
    button.style.margin = '5px 2px';
    button.style.cursor = 'pointer';
    button.style.borderRadius = '10px';

    button.addEventListener('mouseover', function() {
        button.style.backgroundColor = '#4CAF50';
    });
    button.addEventListener('mouseout', function() {
        button.style.backgroundColor = '#17a2b8';
    });
}
///////////////////////////////////////////////////////////////
//Event Handling Function//
//Funtion handleL1Change
window.handleL1Change = function(event) {
const l1Value = event.target.value;
const l1Text = document.querySelector('#ccp-current-state-text').textContent.trim();
        const l2Container = document.getElementById('aux-l2-container');
        const l3Container = document.getElementById('aux-l3-container');
        localStorage.setItem('auxL1', l1Value);
        l2Container.innerHTML = '';
        l3Container.innerHTML = '';
        l2Container.style.display = 'none';
        l3Container.style.display = 'none';

            // Define l2Value
            const l2Value = document.getElementById('aux-l2') ? document.getElementById('aux-l2').value : '';

        if (l2Mapping[l1Value]) {
            let l2SelectHTML = '<select id="aux-l2" onchange="handleL2Change(event)">';
            l2SelectHTML += '<option value="">Select L2</option>';
            l2Mapping[l1Value].forEach(opt => {
                l2SelectHTML += `<option value="${opt}">${opt}</option>`;
            });
            l2SelectHTML += '</select>';
            l2Container.innerHTML = l2SelectHTML;

            document.getElementById('aux-l2').addEventListener('change', function(event) {
                const l2Value = event.target.value;
                const l1Value = document.getElementById('aux-l1').value;
                if (l2Value) {
                    if (!l3Mapping[l2Value]) {
                        startAUXTimer(`${l1Names[l1Value]} - ${l2Value} - N/A`);
                    }
                } else {
                    stopAUXTimer();
                }
            });

            l2Container.style.display = 'block';
        } else {
            const newAuxLabel = `${l1Names[l1Value]} - N/A - N/A`;
            startAUXTimer(newAuxLabel);

          if (l1Value === '') {
            alert('Export your NPT to AWS');
            } else {
                console.log('no messages');
            };

    // Conditionally show the popup only if the last selection was 'Conduct Project' and if L2 is not present or not equal to 'Conduct Project'
        if (l1Value !== '') {
            showCombinedPopup(newAuxLabel, (auditData) => {
                console.log('Audit data submitted:', auditData);
            });
    }
        }

    // Check if previous AUX was 'Conduct Project'
    if (localStorage.getItem('previousAux') === 'CP' && l1Value !== 'Conduct Project') {
        alert('Your previous AUX was Conduct Project, please enter Audit counts if applicable');
    }
    localStorage.setItem('previousAux', l1Value === 'Conduct Project' ? 'CP' : '');
    };

//Funtion handleL2Change
    window.handleL2Change = function(event) {
        const l2Value = event.target.value;
        const l3Container = document.getElementById('aux-l3-container');
        localStorage.setItem('auxL2', l2Value);
        l3Container.innerHTML = '';
        l3Container.style.display = 'none';

        if (l3Mapping[l2Value]) {
            let l3SelectHTML = '<select id="aux-l3" onchange="handleL3Change(event)">';
            l3SelectHTML += '<option value="">Select L3</option>';
            l3Mapping[l2Value].forEach(opt => {
                l3SelectHTML += `<option value="${opt}">${opt}</option>`;
            });
            l3SelectHTML += '</select>';
            l3Container.innerHTML = l3SelectHTML;

            document.getElementById('aux-l3').addEventListener('change', function(event) {
                const l3Value = event.target.value;
                const l2Value = document.getElementById('aux-l2').value;
                const l1Value = document.getElementById('aux-l1').value;
                if (l3Value) {
                    startAUXTimer(`${l1Names[l1Value]} - ${l2Value} - ${l3Value}`);
                } else {
                    stopAUXTimer();
                }
            });

            l3Container.style.display = 'block';
        } else {
            const l1Value = document.getElementById('aux-l1').value;
            startAUXTimer(`${l1Names[l1Value]} - ${l2Value} - N/A`);
        }

        const l1Value = document.getElementById('aux-l1').value;
        const newAuxLabel = `${l1Names[l1Value]} - ${l2Value} - N/A`;
        updateTimerDisplay(newAuxLabel, 0);

        // Conditionally show the popup only if L2 is not equal to 'Conduct Project' and if there are no L3 options available
        if (l2Value !== '' && !l3Mapping[l2Value]) {
            showCombinedPopup(newAuxLabel, (auditData) => {
            console.log('Audit data submitted:', auditData);
           });
        }

    // Check if previous AUX was 'Conduct Project'
    if (localStorage.getItem('previousAux') === 'CP' && l2Value !== 'Conduct Project') {
        alert('Your previous AUX was Conduct Project, please enter Audit counts if applicable');
    }
    localStorage.setItem('previousAux', l2Value === 'Conduct Project' ? 'CP' : '');
    };

// Function to handle L3 change
window.handleL3Change = function(event) {
    const l3Value = event.target.value;
    const l2Value = document.getElementById('aux-l2').value;
    const l1Value = document.getElementById('aux-l1').value;
    localStorage.setItem('auxL3', l3Value);

    const PreviousAux = localStorage.getItem('PreviousAux');

    // Conditionally show the popup only if new L3 is the same as previous and not 'Conduct Project'
    if (l3Value !== '') {
        const newAuxLabel = `${l1Names[l1Value]} - ${l2Value} - ${l3Value}`;
        showCombinedPopup(newAuxLabel, (auditData) => {
            console.log('Audit data submitted:', auditData);
        });
    }

    // Update localStorage with current AUX as PreviousAux
    localStorage.setItem('PreviousAux', l3Value);

    // Remaining code for updating timer, saving AUX data, etc.
    const startTime = JSON.parse(localStorage.getItem('auxState')).startTime;
    const endTime = new Date();
    const timeSpent = endTime - new Date(startTime);

    const formattedTimeSpent = formatTime(timeSpent);

    const newAuxLabel = `${l1Names[l1Value]} - ${l2Value} - ${l3Value}`;
    updateTimerDisplay(newAuxLabel, timeSpent);

    saveAUXData({
        auxLabel: newAuxLabel,
        timeSpent: timeSpent
    });

    // Update last selections
    lastSelectedL1 = l1Value;
    lastSelectedL2 = l2Value;
    lastSelectedL3 = l3Value;
    lastL3Selection = l3Value;
    updateTimerDisplay(newAuxLabel, timeSpent);
    finalSelectionMade = true;

    // Check if final layer selected
    if (finalLayerSelected()) {
        const l1Value = document.getElementById('aux-l1').value;
        const l2Value = document.getElementById('aux-l2').value;
        const l3Value = document.getElementById('aux-l3').value;
        const auxLabel = `${l1Names[l1Value]} - ${l2Value} - ${l3Value}`;
        const timeSpent = calculateTimeSpent(startTime);
        saveAUXData({ auxLabel, timeSpent });
        exportToCSV();
        exportToServer();
        exportToAWS();
    }

    if (localStorage.getItem('previousAux') === 'CP' && l3Value !== 'Conduct Project') {
        alert('Your previous AUX was Conduct Project, please enter Audit counts if applicable');
    }
    localStorage.setItem('previousAux', l3Value === 'Conduct Project' ? 'CP' : '');
};
///////////////////////////////////////////////////////////////
//POP-UP Function//
// Function to show popup and handle audit data submission
function showCombinedPopup(auxLabel, callback) {
    console.log('showCombinedPopup function called');
    const popup = document.createElement('div');
    popup.id = 'combined-popup';
popup.innerHTML = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%) scale(0); z-index: 10000; background: url(https://drive-render.corp.amazon.com/view/mofila@/Microsite%20Automated%20NPT/Images/Dark%20Background%20Cyan%20and%20White%20Neon%20and%20Typographic%20Desktop%20Wallpaper.jpg) no-repeat center center / cover; padding: 30px; border-radius: 20px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3); max-width: 600px; color: white; font-family: Arial, sans-serif; animation: popupIn 0.3s forwards;" id="combined-popup">
        <h2 style="margin-bottom: 20px; font-size: 28px; text-align: center;">Enter Data</h2>
        <div style="display: flex; flex-wrap: wrap; justify-content: space-between;">
            <div style="flex-basis: calc(50% - 10px); margin-bottom: 20px;">
                <label for="projectTitle" style="display: block; margin-bottom: 5px; font-size: 18px;">Project Title:</label>
                <input type="text" id="projectTitle" name="projectTitle" style="width: 100%; padding: 12px; font-size: 16px; border: none; border-radius: 10px; background-color: rgba(255, 255, 255, 0.8);">
            </div>
            <div style="flex-basis: calc(50% - 10px); margin-bottom: 20px;">
                <label for="relatedAudits" style="display: block; margin-bottom: 5px; font-size: 18px;">Audit Counts:</label>
                <input type="number" id="relatedAudits" name="relatedAudits" style="width: 100%; padding: 12px; font-size: 16px; border: none; border-radius: 10px; background-color: rgba(255, 255, 255, 0.8);">
            </div>
            <div style="flex-basis: 100%; margin-bottom: 20px;">
                <label for="comment-text" style="display: block; margin-bottom: 5px; font-size: 18px;">Comment:</label>
                <textarea id="comment-text" rows="4" style="width: 100%; padding: 12px; font-size: 16px; border: none; border-radius: 10px; background-color: rgba(255, 255, 255, 0.8);"></textarea>
            </div>
            <div style="flex-basis: 100%; margin-bottom: 20px;">
                <label style="display: block; margin-bottom: 5px; font-size: 18px;">Are you the PL?</label>
                <input type="radio" id="areYouPLYes" name="areYouPL" value="Yes" style="margin-right: 3px;">
                <label for="areYouPLYes" style="margin-right: 20px;">Yes</label>
                <input type="radio" id="areYouPLNo" name="areYouPL" value="No" style="margin-right: 3px;">
                <label for="areYouPLNo" style="margin-right: 20px;">No</label>
                <input type="radio" id="areYouPLN/A" name="areYouPL" value="N/A" style="margin-right: 3px;">
                <label for="areYouPLNo">N/A</label>
            </div>
        </div>
        <div style="text-align: center;">
            <button type="button" id="submit-btn" style="padding: 12px 24px; font-size: 18px; background-color: #6c5ce7; color: white; border: none; border-radius: 10px; cursor: pointer;">Submit</button>
            <button type="button" id="cancel-btn" style="margin-left: 20px; padding: 12px 24px; font-size: 18px; background-color: #95a5a6; color: white; border: none; border-radius: 10px; cursor: pointer;">Cancel</button>
        </div>
    </div>
    <style>
        @keyframes popupIn {
            from { transform: translate(-50%, -50%) scale(0); }
            to { transform: translate(-50%, -50%) scale(1); }
        }
        @keyframes popupOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
    </style>
`;
    document.body.appendChild(popup);

    // Attach event listener to submit button
    document.getElementById('submit-btn').addEventListener('click', function() {
        if (validateInputs()) {
            submitCombinedData(auxLabel, callback);
            closePopup();
        } else {
            alert('OH OH! Seems like you forgot something :)');
        }
    });

    // Attach event listener to cancel button
    document.getElementById('cancel-btn').addEventListener('click', function() {
        closePopup();
    });

    // Function to close the popup
    function closePopup() {
        const popup = document.getElementById('combined-popup');
        popup.style.animation = 'popupOut 0.3s forwards';
        setTimeout(() => popup.remove(), 300);
    }

    // Detect page refresh or navigation away
    window.addEventListener('beforeunload', function(e) {
        const popup = document.getElementById('combined-popup');
        if (popup) {
            e.preventDefault();
            e.returnValue = '';
        }
    });
}

function validateInputs() {
    const projectTitle = document.getElementById('projectTitle').value;
    const comment = document.getElementById('comment-text').value;

    return projectTitle.trim() !== '' && comment.trim() !== '';
}

function submitCombinedData(auxLabel, callback) {
    const comment = document.getElementById('comment-text').value;
    const projectTitle = document.getElementById('projectTitle').value;
    const relatedAudits = document.getElementById('relatedAudits').value;
    const areYouPL = document.querySelector('input[name="areYouPL"]:checked').value;

    localStorage.setItem('comment-' + auxLabel, comment);
    localStorage.setItem('areYouPL-' + auxLabel, areYouPL);
    localStorage.setItem('projectTitle-' + auxLabel, projectTitle);
    localStorage.setItem('relatedAudits-' + auxLabel, relatedAudits);
    document.getElementById('combined-popup').remove();

    callback({ comment, areYouPL, projectTitle, relatedAudits});
}

        function finalLayerSelected() {
        const auxL1Value = document.getElementById('aux-l1').value;
        const auxL2Value = document.getElementById('aux-l2').value;
        const auxL3Value = document.getElementById('aux-l3').value;

        return auxL1Value && auxL2Value && auxL3Value && !l3Mapping[auxL2Value];
    }
///////////////////////////////////////////////////////////////
//Timer Functions//
// Format time from milliseconds to hours, minutes, and seconds
function formatTime(ms) {
        const seconds = Math.floor((ms / 1000) % 60);
        const minutes = Math.floor((ms / (1000 * 60)) % 60);
        const hours = Math.floor((ms / (1000 * 60 * 60)) % 24);
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

// Function to format date to YYYY-MM-DD format
function formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
}

// Function to calculate time spent from start time to current time
function calculateTimeSpent(startTime) {
        const endTime = new Date();
        return endTime - new Date(startTime);
}

// Function to display the timer
function displayTimer() {
        let timerElement = document.getElementById('aux-timer');
        if (!timerElement) {
            const widget = document.getElementById('aux-widget');
            if (widget) {
                timerElement = document.createElement('div');
                timerElement.id = 'aux-timer';
                timerElement.style.padding = '10px';
                timerElement.style.marginTop = '10px';
                timerElement.style.background = '#f0f0f0';
                timerElement.style.borderRadius = '5px';
                widget.appendChild(timerElement);
            }
        }
        return timerElement;
}

// Function to start the AUX timer
function startAUXTimer(auxLabel, elapsedTime = 0) {
    const auxState = JSON.parse(localStorage.getItem('auxState'));

    // Check if the same AUX is already running, update display, and return
    if (auxState && auxState.auxLabel === auxLabel) {
        updateTimerDisplay(auxLabel, calculateTimeSpent(auxState.startTime));
        return;
    }

    stopAUXTimer(); // Stop any existing timer

    // Start time adjusted for the elapsed time
    const startTime = new Date().getTime() - elapsedTime;
    localStorage.setItem('auxState', JSON.stringify({ auxLabel, startTime }));
    const timerElement = displayTimer();

    function updateTimer() {
        const currentElapsedTime = new Date().getTime() - startTime;
        timerElement.textContent = `Current AUX: ${auxLabel} - Time: ${formatTime(currentElapsedTime)}`;
        timerElement.style.color = 'black';
        requestAnimationFrame(updateTimer);
    }

    requestAnimationFrame(updateTimer);

    saveAUXData({
        auxLabel,
        timeSpent: 0
    });
}

// Function to stop the AUX timer
    function stopAUXTimer() {
        const auxState = JSON.parse(localStorage.getItem('auxState'));
        if (auxState) {
            const { auxLabel, startTime } = auxState;
            const endTime = new Date();
            const timeSpent = endTime - new Date(startTime);
            saveAUXData({
                date: formatDate(endTime),
                username: displayUsername(),
                auxLabel,
                timeSpent
            });
            localStorage.removeItem('auxState');
        }
    }

// Check if current time is after 12 PM
function isAfter12PM() {
    const now = new Date();
    return now.getHours() >= 12;
}

// Automatically start a timer if not logged in after 12 PM
function startLateTimer() {
    const currentTime = new Date();

    // Check if it's after 12 PM, user is not logged in, manual AUX change hasn't occurred, and auxL1 is not set
    if (isAfter12PM() && !localStorage.getItem('userLoggedIn') && !localStorage.getItem('manualAUXChange') && !localStorage.getItem('auxL1')) {
        const auxLabel = 'Late Login';
        const elapsedTime = calculateElapsedTimeFrom12PM();

        // Start the AUX timer with the elapsed time from 12 PM
        startAUXTimer(auxLabel, elapsedTime);
        localStorage.setItem('timerStatus', 'late');
        console.log('Late timer started:', auxLabel, 'Elapsed time:', formatTime(elapsedTime));
    } else {
        console.log('Late timer not started. Either auxL1 is already set or other conditions not met.');
    }
}

// Function to check if user is logged in
function checkLoginStatus() {
    const username = displayUsername();
    if (username) {
        localStorage.setItem('userLoggedIn', true);
        console.log('User logged in:', username);
        localStorage.removeItem('timerStatus');
    }
}

// Function to calculate the time difference between 12:00 PM and the current time
function calculateElapsedTimeFrom12PM() {
    const now = new Date();
    const noon = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12, 0, 0);
    const elapsedTime = now - noon;

    if (elapsedTime < 0) {
        return 0;
    }

    return elapsedTime;
}

// Restore timer from local storage
    function restoreTimer() {
        const auxState = JSON.parse(localStorage.getItem('auxState'));
        const manualAUXChange = localStorage.getItem('manualAUXChange');

        if (auxState && auxState.startTime) {
            const startTime = auxState.startTime;
            const auxLabel = auxState.auxLabel;
            const timerElement = displayTimer();
            const timerId = setInterval(() => {
                const elapsedTime = calculateTimeSpent(startTime);
                timerElement.textContent = `Current AUX: ${auxLabel} - Time: ${formatTime(elapsedTime)}`;
                timerElement.style.color = 'black';
            }, 1000);
            localStorage.setItem('auxTimerId', timerId.toString());
        }
    }

// Function to update AUX selections
    function updateAuxSelection(auxLabel) {
    if (!auxLabel) return;

    const parts = auxLabel.split(' - ');
    const l1Value = parts[0];
    const l2Value = parts[1] !== 'N/A' ? parts[1] : '';
    const l3Value = parts[2] !== 'N/A' ? parts[2] : '';

    const auxL1 = document.getElementById('aux-l1');
    const auxL2 = document.getElementById('aux-l2');
    const auxL3 = document.getElementById('aux-l3');

    // Set the L1 value in the widget
    if (auxL1 && l1Value) {
        auxL1.value = Object.keys(l1Names).find(key => l1Names[key] === l1Value);
        auxL1.dispatchEvent(new Event('change'));
    }

    // Set the L2 value in the widget
    if (auxL2 && l2Value) {
        auxL2.value = l2Value;
        auxL2.dispatchEvent(new Event('change'));
    }

    // Set the L3 value in the widget
    if (auxL3 && l3Value) {
        setTimeout(() => {
            auxL3.value = l3Value;
            auxL3.dispatchEvent(new Event('change'));
        }, 100);
    }
}

// Function to update the timer display based on saved state
    function updateTimerDisplay(auxLabel, elapsedTime) {
        const timerElement = displayTimer();
        if (timerElement) {
            timerElement.textContent = `Current AUX: ${auxLabel} - Time: ${formatTime(elapsedTime)}`;
            timerElement.style.color = 'black';
        } else {
            console.error('Timer element not found.');
        }
    }
    addExportButton();
    addExportToAWSButton();
    restoreTimer();
    startLateTimer();
    checkLoginStatus();
///////////////////////////////////////////////////////////////
//DOM content loaded
    document.addEventListener('DOMContentLoaded', () => {
    restoreTimer();
    addExportButton();
    addExportToAWSButton();
    startLateTimer();
    checkLoginStatus();

    const auxState = JSON.parse(localStorage.getItem('auxState'));
    if (auxState && auxState.auxLabel) {
        updateAuxSelection(auxState.auxLabel);
    }
});

    document.addEventListener('change', function(event) {
        const auxLabel = event.target.value;
        if (event.target && event.target.id === 'aux-label') {
            if (auxLabel) {
                startAUXTimer(auxLabel);
            } else {
                stopAUXTimer();
            }
        }
    });
})();